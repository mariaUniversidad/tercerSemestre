package principal;

import com.raven.event.EventTimePicker;
import java.sql.Connection;
import conexionSQL.ConexionDB;
import entidades.TbServicios;
import entidades.tbClientes;
import entidades.tbTipoPago;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.PreparedStatement;
import listados.listadoClientes;
import java.sql.ResultSet;
import java.text.ParseException;
import javax.swing.JOptionPane;
import listados.listadoServicios;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import javax.swing.Timer;
import listados.listadoTipoPago;

/**
 *
 * @author Maluli
 */
public class menuPrincipal extends javax.swing.JFrame {

    ConexionDB conexionDB = null;
    listadoClientes listadoC = new listadoClientes();
    listadoServicios listadoS = new listadoServicios();
    listadoTipoPago listadoT = new listadoTipoPago();
    listadoServicios sumaDeServicios = new listadoServicios();
    String numeroAut = "000000126";
    String numeroNota = "0958159626001";
    double adicionalIva = 0;
    public static Long valorSemilla;

    /**
     * Creates new form menuPrincipal
     */
    public menuPrincipal() {
        initComponents();
        iniHourPopUp.addEventTimePicker(new EventTimePicker() {
            @Override
            public void timeSelected(String string) {
                System.out.println("hora inicial: " + string);
            }
        });

        finalHourPopUp.addEventTimePicker(new EventTimePicker() {
            @Override
            public void timeSelected(String string) {
                System.out.println("hora final: " + string);
            }
        });
        Date fechaActual = new Date();
        SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy");
        String fechaFormateada = formatoFecha.format(fechaActual);
        fechaEmision.setText(fechaFormateada);

        conexionDB = new ConexionDB();
        this.panelinicial.setVisible(true);
        this.reservas.setVisible(false);
        this.notasDeVenta.setVisible(false);
        this.clientes.setVisible(false);
        this.sorteos.setVisible(false);
        this.servicios.setVisible(false);
        cargarComboServicios();
        cargarComboTipoPago();
        JListadoServicios.clearSelection();
        comboBoxClientesReserv.setSelectedIndex(-1);
        tipoPago.setSelectedIndex(-1);
        comboBoxClientesNotaVenta.setSelectedIndex(-1);
        tarifaCombo.setSelectedIndex(-1);
        comboBoxClientesNotaVenta.setSelectedIndex(-1);

        subtotal.setText("");
        subtotal.setText("");
        total.setText("");
        horaIni.setText("");
        horaFin.setText("");
        auth.setText(this.numeroAut);
        rucField.setText(this.numeroNota);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        iniHourPopUp = new com.raven.swing.TimePicker();
        finalHourPopUp = new com.raven.swing.TimePicker();
        jMenuItem2 = new javax.swing.JMenuItem();
        panelinicial = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        notasDeVenta = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        rucField = new javax.swing.JTextField();
        tipoPago = new javax.swing.JComboBox<>();
        jLabel25 = new javax.swing.JLabel();
        fechaEmision = new javax.swing.JTextField();
        auth = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        comboBoxClientesNotaVenta = new javax.swing.JComboBox<>();
        jLabel30 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        JListadoServiciosNotadeVenta = new javax.swing.JList<>();
        jLabel31 = new javax.swing.JLabel();
        total = new javax.swing.JTextField();
        subtotal = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        cancelarNotaVenta = new javax.swing.JButton();
        guardarNotaVenta = new javax.swing.JButton();
        tarifaCombo = new javax.swing.JComboBox<>();
        background = new javax.swing.JLabel();
        reservas = new javax.swing.JPanel();
        fechaReserva = new com.toedter.calendar.JDateChooser();
        comboBoxClientesReserv = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        JListadoServicios = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        seleccionarHoraFinal = new javax.swing.JButton();
        seleccionarHoraInicial1 = new javax.swing.JButton();
        guardarReserva = new javax.swing.JButton();
        cancelarReserva = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        horaIni = new javax.swing.JTextField();
        horaFin = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        sorteos = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        fechaex = new com.toedter.calendar.JDateChooser();
        ganadorField = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        cancelarNotaVenta1 = new javax.swing.JButton();
        generarGanador = new javax.swing.JButton();
        generarRandom = new javax.swing.JButton();
        fondosorteos = new javax.swing.JLabel();
        clientes = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        identificacion = new javax.swing.JTextField();
        correo = new javax.swing.JTextField();
        telefono = new javax.swing.JTextField();
        nombreCompleto = new javax.swing.JTextField();
        guardacliente = new javax.swing.JButton();
        cancelarCliente = new javax.swing.JButton();
        fondoclientes = new javax.swing.JLabel();
        servicios = new javax.swing.JPanel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        costoServ = new javax.swing.JTextField();
        servicioNamefield = new javax.swing.JTextField();
        guardaserv = new javax.swing.JButton();
        cancelarserv = new javax.swing.JButton();
        backgroundServ = new javax.swing.JLabel();
        jMenuBar2 = new javax.swing.JMenuBar();
        menuPrinci = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        reservasMenu = new javax.swing.JMenu();
        reservasItem = new javax.swing.JMenuItem();
        notaDeVentaMenu = new javax.swing.JMenu();
        notaDeVentaItem = new javax.swing.JMenuItem();
        sorteosMenu = new javax.swing.JMenu();
        sorteosItem = new javax.swing.JMenuItem();
        clientesMenu = new javax.swing.JMenu();
        clientesItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menuServicios = new javax.swing.JMenuItem();

        iniHourPopUp.setForeground(new java.awt.Color(58, 26, 100));
        iniHourPopUp.setDisplayText(horaIni);

        finalHourPopUp.setForeground(new java.awt.Color(58, 26, 100));
        finalHourPopUp.setDisplayText(horaFin);

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelinicial.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 51, 102));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursosVisuales/fondo1.png"))); // NOI18N
        jLabel1.setPreferredSize(null);
        panelinicial.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 780, 470));

        getContentPane().add(panelinicial, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 780, 420));

        notasDeVenta.setMaximumSize(new java.awt.Dimension(900, 636));
        notasDeVenta.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(112, 43, 248));
        jLabel10.setText("Total");
        notasDeVenta.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 300, -1, -1));

        jLabel21.setBackground(new java.awt.Color(255, 255, 255));
        jLabel21.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("Nota de venta");
        notasDeVenta.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 0, -1, -1));

        jLabel24.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(255, 255, 255));
        jLabel24.setText("Fecha de emisión");
        notasDeVenta.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 30, -1, -1));

        rucField.setEditable(false);
        rucField.setBackground(new java.awt.Color(224, 224, 255));
        notasDeVenta.add(rucField, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 100, 210, 30));

        notasDeVenta.add(tipoPago, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 150, 460, 30));

        jLabel25.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(255, 255, 255));
        jLabel25.setText("Tipo de pago");
        notasDeVenta.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, -1, -1));

        fechaEmision.setEditable(false);
        fechaEmision.setBackground(new java.awt.Color(224, 224, 255));
        notasDeVenta.add(fechaEmision, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 50, 210, 30));

        auth.setEditable(false);
        auth.setBackground(new java.awt.Color(224, 224, 255));
        notasDeVenta.add(auth, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, 460, 30));

        jLabel26.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(255, 255, 255));
        jLabel26.setText("Autorización sri");
        notasDeVenta.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, -1, -1));

        jLabel29.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(255, 255, 255));
        jLabel29.setText("Ruc");
        notasDeVenta.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 80, -1, -1));

        notasDeVenta.add(comboBoxClientesNotaVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 50, 460, 30));

        jLabel30.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(255, 255, 255));
        jLabel30.setText("Cliente");
        notasDeVenta.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 30, -1, -1));

        JListadoServiciosNotadeVenta.setToolTipText("");
        jScrollPane2.setViewportView(JListadoServiciosNotadeVenta);

        notasDeVenta.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 220, 360, 190));

        jLabel31.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel31.setForeground(new java.awt.Color(112, 43, 248));
        jLabel31.setText("Servicios");
        notasDeVenta.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 200, -1, -1));

        total.setEditable(false);
        total.setBackground(new java.awt.Color(224, 224, 255));
        notasDeVenta.add(total, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 320, 280, 30));

        subtotal.setEditable(false);
        subtotal.setBackground(new java.awt.Color(224, 224, 255));
        notasDeVenta.add(subtotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 220, 280, 30));

        jLabel32.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(112, 43, 248));
        jLabel32.setText("Subtotal");
        notasDeVenta.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 200, -1, -1));

        jLabel33.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(112, 43, 248));
        jLabel33.setText("Tarifa iva");
        notasDeVenta.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 250, -1, -1));

        cancelarNotaVenta.setBackground(new java.awt.Color(102, 102, 102));
        cancelarNotaVenta.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        cancelarNotaVenta.setForeground(new java.awt.Color(255, 255, 255));
        cancelarNotaVenta.setText("Cancelar");
        cancelarNotaVenta.setToolTipText("");
        cancelarNotaVenta.setActionCommand("");
        cancelarNotaVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarNotaVentaActionPerformed(evt);
            }
        });
        notasDeVenta.add(cancelarNotaVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 370, 120, 40));

        guardarNotaVenta.setBackground(new java.awt.Color(112, 43, 248));
        guardarNotaVenta.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        guardarNotaVenta.setForeground(new java.awt.Color(255, 255, 255));
        guardarNotaVenta.setText("Guardar");
        guardarNotaVenta.setToolTipText("");
        guardarNotaVenta.setActionCommand("");
        guardarNotaVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarNotaVentaActionPerformed(evt);
            }
        });
        notasDeVenta.add(guardarNotaVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 370, 120, 40));

        tarifaCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0%", "12%" }));
        tarifaCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tarifaComboActionPerformed(evt);
            }
        });
        notasDeVenta.add(tarifaCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 270, 280, 30));

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursosVisuales/fondonotadeventa.png"))); // NOI18N
        background.setText("nota de venta");
        notasDeVenta.add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(-60, -70, -1, -1));

        getContentPane().add(notasDeVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 780, 420));

        reservas.setBackground(new java.awt.Color(255, 255, 255));
        reservas.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        reservas.add(fechaReserva, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 60, 290, 40));

        comboBoxClientesReserv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxClientesReservActionPerformed(evt);
            }
        });
        reservas.add(comboBoxClientesReserv, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 60, 340, 40));

        jScrollPane1.setViewportView(JListadoServicios);

        reservas.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 240, 660, 120));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(112, 43, 248));
        jLabel2.setText("Detalles de reserva");
        reservas.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 200, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Fecha de reserva");
        reservas.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 40, -1, -1));

        seleccionarHoraFinal.setBackground(new java.awt.Color(58, 26, 100));
        seleccionarHoraFinal.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        seleccionarHoraFinal.setForeground(new java.awt.Color(255, 255, 255));
        seleccionarHoraFinal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursosVisuales/hora.png"))); // NOI18N
        seleccionarHoraFinal.setToolTipText("");
        seleccionarHoraFinal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarHoraFinalActionPerformed(evt);
            }
        });
        reservas.add(seleccionarHoraFinal, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 130, 70, 40));

        seleccionarHoraInicial1.setBackground(new java.awt.Color(58, 26, 100));
        seleccionarHoraInicial1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        seleccionarHoraInicial1.setForeground(new java.awt.Color(255, 255, 255));
        seleccionarHoraInicial1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursosVisuales/hora.png"))); // NOI18N
        seleccionarHoraInicial1.setToolTipText("");
        seleccionarHoraInicial1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarHoraInicial1ActionPerformed(evt);
            }
        });
        reservas.add(seleccionarHoraInicial1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 130, 70, 40));

        guardarReserva.setBackground(new java.awt.Color(112, 43, 248));
        guardarReserva.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        guardarReserva.setForeground(new java.awt.Color(255, 255, 255));
        guardarReserva.setText("Guardar");
        guardarReserva.setToolTipText("");
        guardarReserva.setActionCommand("");
        guardarReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarReservaActionPerformed(evt);
            }
        });
        reservas.add(guardarReserva, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 370, 120, 40));

        cancelarReserva.setBackground(new java.awt.Color(102, 102, 102));
        cancelarReserva.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        cancelarReserva.setForeground(new java.awt.Color(255, 255, 255));
        cancelarReserva.setText("Cancelar");
        cancelarReserva.setToolTipText("");
        cancelarReserva.setActionCommand("");
        cancelarReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarReservaActionPerformed(evt);
            }
        });
        reservas.add(cancelarReserva, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 370, 120, 40));

        jLabel20.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("Hora inicial de reserva");
        reservas.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 110, -1, -1));

        horaIni.setEditable(false);
        horaIni.setBackground(new java.awt.Color(229, 229, 255));
        horaIni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horaIniActionPerformed(evt);
            }
        });
        reservas.add(horaIni, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 130, 260, 40));

        horaFin.setEditable(false);
        horaFin.setBackground(new java.awt.Color(229, 229, 255));
        horaFin.setForeground(new java.awt.Color(102, 102, 102));
        horaFin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horaFinActionPerformed(evt);
            }
        });
        reservas.add(horaFin, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 130, 210, 40));

        jLabel23.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 255, 255));
        jLabel23.setText("Nombre del cliente");
        reservas.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 40, -1, -1));

        jLabel22.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText("Hora final de la reserva");
        reservas.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 110, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Reserva");
        reservas.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 0, -1, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursosVisuales/fondonotadeventa.png"))); // NOI18N
        jLabel5.setText("jLabel5");
        reservas.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(-60, 0, 840, 490));

        getContentPane().add(reservas, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 780, 420));

        sorteos.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel28.setBackground(new java.awt.Color(255, 255, 255));
        jLabel28.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(255, 255, 255));
        jLabel28.setText("Sorteos del establecimiento");
        sorteos.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 30, -1, -1));
        sorteos.add(fechaex, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 200, 510, 40));

        ganadorField.setEditable(false);
        ganadorField.setBackground(new java.awt.Color(244, 244, 255));
        ganadorField.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        ganadorField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ganadorFieldActionPerformed(evt);
            }
        });
        sorteos.add(ganadorField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 100, 340, 70));

        jLabel39.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel39.setForeground(new java.awt.Color(255, 255, 255));
        jLabel39.setText("Fecha de expiración");
        sorteos.add(jLabel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 180, -1, -1));

        jLabel38.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel38.setForeground(new java.awt.Color(255, 255, 255));
        jLabel38.setText("Clientes participantes");
        sorteos.add(jLabel38, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 80, -1, -1));

        cancelarNotaVenta1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        cancelarNotaVenta1.setForeground(new java.awt.Color(102, 102, 102));
        cancelarNotaVenta1.setText("Cancelar");
        cancelarNotaVenta1.setToolTipText("");
        cancelarNotaVenta1.setActionCommand("");
        cancelarNotaVenta1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarNotaVenta1ActionPerformed(evt);
            }
        });
        sorteos.add(cancelarNotaVenta1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 300, 140, 40));

        generarGanador.setBackground(new java.awt.Color(47, 4, 133));
        generarGanador.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        generarGanador.setForeground(new java.awt.Color(255, 255, 255));
        generarGanador.setText("Generar ganador");
        generarGanador.setToolTipText("");
        generarGanador.setActionCommand("");
        generarGanador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarGanadorActionPerformed(evt);
            }
        });
        sorteos.add(generarGanador, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 100, 150, 70));

        generarRandom.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        generarRandom.setForeground(new java.awt.Color(112, 43, 248));
        generarRandom.setText("Guardar");
        generarRandom.setToolTipText("");
        generarRandom.setActionCommand("");
        generarRandom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarRandomActionPerformed(evt);
            }
        });
        sorteos.add(generarRandom, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 300, 140, 40));

        fondosorteos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursosVisuales/sorteo.png"))); // NOI18N
        sorteos.add(fondosorteos, new org.netbeans.lib.awtextra.AbsoluteConstraints(-20, -10, 840, 420));

        getContentPane().add(sorteos, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 780, 420));

        clientes.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel27.setBackground(new java.awt.Color(255, 255, 255));
        jLabel27.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(255, 255, 255));
        jLabel27.setText("Ingreso de clientes");
        clientes.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 40, -1, -1));

        jLabel34.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(255, 255, 255));
        jLabel34.setText("Itentificación");
        clientes.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 190, -1, -1));

        jLabel35.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel35.setForeground(new java.awt.Color(255, 255, 255));
        jLabel35.setText("Correo eléctronico");
        clientes.add(jLabel35, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 190, -1, -1));

        jLabel36.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel36.setForeground(new java.awt.Color(255, 255, 255));
        jLabel36.setText("Teléfono");
        clientes.add(jLabel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 190, -1, -1));

        jLabel37.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel37.setForeground(new java.awt.Color(255, 255, 255));
        jLabel37.setText("Nombre completo");
        clientes.add(jLabel37, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 110, -1, -1));
        clientes.add(identificacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 210, 170, 40));

        correo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                correoActionPerformed(evt);
            }
        });
        clientes.add(correo, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 210, 170, 40));
        clientes.add(telefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 210, 180, 40));
        clientes.add(nombreCompleto, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 130, 540, 40));

        guardacliente.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        guardacliente.setForeground(new java.awt.Color(74, 6, 207));
        guardacliente.setText("Guardar");
        guardacliente.setToolTipText("");
        guardacliente.setActionCommand("");
        guardacliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardaclienteActionPerformed(evt);
            }
        });
        clientes.add(guardacliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 350, 120, 40));

        cancelarCliente.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        cancelarCliente.setForeground(new java.awt.Color(102, 102, 102));
        cancelarCliente.setText("Cancelar");
        cancelarCliente.setToolTipText("");
        cancelarCliente.setActionCommand("");
        cancelarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarClienteActionPerformed(evt);
            }
        });
        clientes.add(cancelarCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 350, 120, 40));

        fondoclientes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursosVisuales/sorteo.png"))); // NOI18N
        clientes.add(fondoclientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 780, 420));

        getContentPane().add(clientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 780, 420));

        servicios.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel40.setBackground(new java.awt.Color(255, 255, 255));
        jLabel40.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel40.setForeground(new java.awt.Color(255, 255, 255));
        jLabel40.setText("Ingreso de servicios");
        servicios.add(jLabel40, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, -1, -1));

        jLabel41.setBackground(new java.awt.Color(255, 255, 255));
        jLabel41.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel41.setForeground(new java.awt.Color(255, 255, 255));
        jLabel41.setText("Servicios");
        servicios.add(jLabel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 120, -1, -1));

        jLabel44.setBackground(new java.awt.Color(255, 255, 255));
        jLabel44.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel44.setForeground(new java.awt.Color(255, 255, 255));
        jLabel44.setText("Costo servicios");
        servicios.add(jLabel44, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 120, -1, -1));

        jLabel43.setBackground(new java.awt.Color(255, 255, 255));
        jLabel43.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel43.setForeground(new java.awt.Color(255, 255, 255));
        servicios.add(jLabel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 110, -1, -1));
        servicios.add(costoServ, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 140, 260, 40));
        servicios.add(servicioNamefield, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 140, 260, 40));

        guardaserv.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        guardaserv.setForeground(new java.awt.Color(74, 6, 207));
        guardaserv.setText("Guardar");
        guardaserv.setToolTipText("");
        guardaserv.setActionCommand("");
        guardaserv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardaservActionPerformed(evt);
            }
        });
        servicios.add(guardaserv, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 240, 120, 40));

        cancelarserv.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        cancelarserv.setForeground(new java.awt.Color(102, 102, 102));
        cancelarserv.setText("Cancelar");
        cancelarserv.setToolTipText("");
        cancelarserv.setActionCommand("");
        cancelarserv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarservActionPerformed(evt);
            }
        });
        servicios.add(cancelarserv, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 240, 120, 40));

        backgroundServ.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursosVisuales/sorteo.png"))); // NOI18N
        servicios.add(backgroundServ, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        getContentPane().add(servicios, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 780, 420));

        menuPrinci.setForeground(new java.awt.Color(112, 43, 248));
        menuPrinci.setText("Menú principal");
        menuPrinci.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jMenuItem1.setForeground(new java.awt.Color(204, 0, 102));
        jMenuItem1.setText("Ir al menú");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        menuPrinci.add(jMenuItem1);

        jMenuBar2.add(menuPrinci);

        reservasMenu.setForeground(new java.awt.Color(112, 43, 248));
        reservasMenu.setText("Reservas");
        reservasMenu.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        reservasMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservasMenuActionPerformed(evt);
            }
        });

        reservasItem.setForeground(new java.awt.Color(204, 0, 102));
        reservasItem.setText("Realizar reserva");
        reservasItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservasItemActionPerformed(evt);
            }
        });
        reservasMenu.add(reservasItem);

        jMenuBar2.add(reservasMenu);

        notaDeVentaMenu.setForeground(new java.awt.Color(112, 43, 248));
        notaDeVentaMenu.setText("Notas de ventas");
        notaDeVentaMenu.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        notaDeVentaItem.setForeground(new java.awt.Color(204, 0, 102));
        notaDeVentaItem.setText("Impresión de notas de ventas");
        notaDeVentaItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notaDeVentaItemActionPerformed(evt);
            }
        });
        notaDeVentaMenu.add(notaDeVentaItem);

        jMenuBar2.add(notaDeVentaMenu);

        sorteosMenu.setForeground(new java.awt.Color(112, 43, 248));
        sorteosMenu.setText("Sorteos");
        sorteosMenu.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        sorteosItem.setForeground(new java.awt.Color(204, 0, 102));
        sorteosItem.setText("Reconocer sorteo");
        sorteosItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sorteosItemActionPerformed(evt);
            }
        });
        sorteosMenu.add(sorteosItem);

        jMenuBar2.add(sorteosMenu);

        clientesMenu.setForeground(new java.awt.Color(112, 43, 248));
        clientesMenu.setText("Clientes");
        clientesMenu.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        clientesItem.setForeground(new java.awt.Color(204, 0, 102));
        clientesItem.setText("Ingresar clientes");
        clientesItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientesItemActionPerformed(evt);
            }
        });
        clientesMenu.add(clientesItem);

        jMenuBar2.add(clientesMenu);

        jMenu2.setBackground(new java.awt.Color(102, 0, 204));
        jMenu2.setText("Servicios");
        jMenu2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        menuServicios.setForeground(new java.awt.Color(255, 0, 153));
        menuServicios.setText("Agregar servicios");
        menuServicios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuServiciosActionPerformed(evt);
            }
        });
        jMenu2.add(menuServicios);

        jMenuBar2.add(jMenu2);

        setJMenuBar(jMenuBar2);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void reservasMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservasMenuActionPerformed

    }//GEN-LAST:event_reservasMenuActionPerformed

    private void sorteosItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sorteosItemActionPerformed
        this.panelinicial.setVisible(false);
        this.reservas.setVisible(false);
        this.notasDeVenta.setVisible(false);
        this.clientes.setVisible(false);
        this.sorteos.setVisible(true);
        this.servicios.setVisible(false);
        fechaex.setDate(null);
        ganadorField.setText("");
    }//GEN-LAST:event_sorteosItemActionPerformed

    private void reservasItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservasItemActionPerformed
        this.panelinicial.setVisible(false);
        this.reservas.setVisible(true);
        this.notasDeVenta.setVisible(false);
        this.clientes.setVisible(false);
        this.sorteos.setVisible(false);
        this.servicios.setVisible(false);
        cargarComboServicios();
        cargarComboClientes();
    }//GEN-LAST:event_reservasItemActionPerformed

    private void notaDeVentaItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notaDeVentaItemActionPerformed
        this.panelinicial.setVisible(false);
        this.reservas.setVisible(false);
        this.notasDeVenta.setVisible(true);
        this.clientes.setVisible(false);
        this.sorteos.setVisible(false);
        this.servicios.setVisible(false);
        cargarComboServicios();
        cargarComboClientes();
    }//GEN-LAST:event_notaDeVentaItemActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        this.panelinicial.setVisible(true);
        this.reservas.setVisible(false);
        this.notasDeVenta.setVisible(false);
        this.clientes.setVisible(false);
        this.sorteos.setVisible(false);
        this.servicios.setVisible(false);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void horaFinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horaFinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_horaFinActionPerformed

    private void horaIniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horaIniActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_horaIniActionPerformed

    private void cancelarReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarReservaActionPerformed
        this.panelinicial.setVisible(true);
        this.reservas.setVisible(false);
        this.notasDeVenta.setVisible(false);
        this.clientes.setVisible(false);
        this.sorteos.setVisible(false);
        this.servicios.setVisible(false);
        JListadoServicios.clearSelection();
        comboBoxClientesReserv.setSelectedIndex(-1);
        fechaReserva.setDate(null);

    }//GEN-LAST:event_cancelarReservaActionPerformed

    private void guardarReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarReservaActionPerformed
        Date fechaActual = new Date();
        Date fechaSelecc = fechaReserva.getDate();

        int resultadocomparacion = fechaActual.compareTo(fechaSelecc);
        /*Validciones de formulario*/
        int listadoJtext = comboBoxClientesReserv.getSelectedIndex();
        Date fechaReservacion = fechaReserva.getDate();
        int[] serviciosSeleccionados = JListadoServicios.getSelectedIndices();
        java.sql.Date fechaReservacionSql = new java.sql.Date(fechaReservacion.getDate());
        // Formatear el objeto LocalTime utilizando el formatter de salida
        if ((listadoJtext == -1) && (serviciosSeleccionados.length == 0) && (fechaReservacion == null)) {

            JOptionPane.showMessageDialog(null, "Debe ingresar todos los campos del formulario.", "Ingrese los datos correctamente", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (resultadocomparacion > 0) {
            JOptionPane.showMessageDialog(null, "La fecha final no debe ser menor o igual que la fehca actual", "Ingrese los datos correctamente", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (listadoJtext == -1) {
            JOptionPane.showMessageDialog(null, "Debe ingresar el nombre del cliente", "Ingrese los datos correctamente", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (serviciosSeleccionados.length == 0) {
            JOptionPane.showMessageDialog(null, "Debe ingresar el/los servicios para la reserva", "Ingrese los datos correctamente", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (fechaReservacion == null) {
            JOptionPane.showMessageDialog(null, "Debe ingresar fecha de reservación.", "Ingrese los datos correctamente", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Obtener la fecha actual
        String horaInicial = iniHourPopUp.getSelectedTime();
        String horaFinal = finalHourPopUp.getSelectedTime();
        DateTimeFormatter formatoAmPm = DateTimeFormatter.ofPattern("hh:mm a", Locale.US);
//        DateTimeFormatter formatoHora = DateTimeFormatter.ofPattern("HH:mm:ss", Locale.forLanguageTag("es-ES"));

        LocalTime horaInicialLocalTime = LocalTime.parse(horaInicial, formatoAmPm);
        LocalTime horaFinalLocalTime = LocalTime.parse(horaFinal, formatoAmPm);

        if (horaFinalLocalTime.isBefore(horaInicialLocalTime)) {
            JOptionPane.showMessageDialog(null, "Hora final no debe ser menor que hora inicial", "Ingrese los datos correctamente", JOptionPane.ERROR_MESSAGE);
            return;
        }

        /*fin Validciones de formulario*/
        String queryDB = "Insert into tb_reservas (fecha_reserva,fk_id_cliente,hora_inicio,hora_fin) "
                + "values (?,?,?,?);";

        tbClientes clienteSeleccionado = listadoC.obtenerClienteByPosicion(comboBoxClientesReserv.getSelectedIndex());
        System.out.println(clienteSeleccionado.getIdCliente());

        Long idCabeceraReservacion = null;

        try (Connection conn = conexionDB.obtenerConexion(); PreparedStatement ps = conn.prepareStatement(queryDB, PreparedStatement.RETURN_GENERATED_KEYS)) {

            ps.setDate(1, fechaReservacionSql);
            ps.setLong(2, clienteSeleccionado.getIdCliente());
            ps.setString(3, iniHourPopUp.getSelectedTime());
            ps.setString(4, finalHourPopUp.getSelectedTime());

            ps.executeUpdate();

            try (ResultSet obtenerAnteriorKey = ps.getGeneratedKeys()) {
                if (obtenerAnteriorKey.next()) {
                    idCabeceraReservacion = obtenerAnteriorKey.getLong(1);

                    System.out.println("ID Autogenerado:  " + idCabeceraReservacion);
                }
            }

            System.out.println("Cabecera insertada con exito" + " Fecha: " + fechaReservacionSql);
        } catch (Exception e) {
            System.out.println("Cabecera no pudo ser insertada" + e);
            return;
        }

        // System.out.println(JListadoServicios.getSelectedIndices());
        String queryServicios = "Insert into tb_reservasDetalle (fk_id_servicio,fk_id_reservas) "
                + " values (?,?);";

        try (Connection conn = conexionDB.obtenerConexion(); PreparedStatement ps = conn.prepareStatement(queryServicios)) {

            for (int i = 0; i < JListadoServicios.getSelectedIndices().length; i++) {
                TbServicios obtenerServiciosByPosicion = listadoS.obtenerServiciosByPosicion(JListadoServicios.getSelectedIndices()[i]);
                ps.setLong(1, obtenerServiciosByPosicion.getIdServicios());
                ps.setLong(2, idCabeceraReservacion);
                ps.execute();
            }

            System.out.println("Insercion de detalle exitoso");
            Object[] options = {"OK"};
            int result = JOptionPane.showOptionDialog(null, "Reserva guardada con éxito", "Proceso exitoso", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
            if (result == JOptionPane.OK_OPTION) {
                JListadoServicios.clearSelection();
                comboBoxClientesReserv.setSelectedIndex(-1);
                fechaReserva.setDate(null);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Lo sentimos, tuvimos problemas con el proceso", "Proceso Fallido", JOptionPane.ERROR_MESSAGE);
            System.err.println("Error registrando detalle: " + e);
        }

    }//GEN-LAST:event_guardarReservaActionPerformed

    private void comboBoxClientesReservActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxClientesReservActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxClientesReservActionPerformed

    private void seleccionarHoraFinalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionarHoraFinalActionPerformed
        finalHourPopUp.showPopup(this, 150, 150);
    }//GEN-LAST:event_seleccionarHoraFinalActionPerformed

    private void seleccionarHoraInicial1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionarHoraInicial1ActionPerformed
        iniHourPopUp.showPopup(this, 150, 150);
    }//GEN-LAST:event_seleccionarHoraInicial1ActionPerformed

    private void cancelarNotaVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarNotaVentaActionPerformed
        this.panelinicial.setVisible(true);
        this.reservas.setVisible(false);
        this.notasDeVenta.setVisible(false);
        this.clientes.setVisible(false);
        this.sorteos.setVisible(false);
    }//GEN-LAST:event_cancelarNotaVentaActionPerformed

    private void clientesItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientesItemActionPerformed
        this.panelinicial.setVisible(false);
        this.reservas.setVisible(false);
        this.notasDeVenta.setVisible(false);
        this.clientes.setVisible(true);
        this.sorteos.setVisible(false);
    }//GEN-LAST:event_clientesItemActionPerformed

    private void guardarNotaVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarNotaVentaActionPerformed
        Date fechaActual = new Date();
        java.util.Date fechaReservacionUtil = fechaActual;
        java.sql.Date fechaReservacionSql = new java.sql.Date(fechaReservacionUtil.getTime());
        double subtotalServicios = 0;
        double totalpaga = 0;
        double TarifaIva = 0;
        System.out.println("opciones de combo:  " + tarifaCombo.getSelectedItem());
        if ((tarifaCombo.getSelectedIndex() == -1) && (comboBoxClientesNotaVenta.getSelectedIndex() == -1) && (tipoPago.getSelectedIndex() == -1) && JListadoServiciosNotadeVenta.getSelectedIndices().length == 0) {
            JOptionPane.showMessageDialog(null, "Debe ingresar todos los datos", "Ingrese los datos correctamente", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (tarifaCombo.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar una tarifa", "Ingrese los datos correctamente", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (comboBoxClientesNotaVenta.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un cliente", "Ingrese los datos correctamente", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (tipoPago.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un tipo de pago", "Ingrese los datos correctamente", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (JListadoServiciosNotadeVenta.getSelectedIndices().length == 0) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un servicio", "Ingrese los datos correctamente", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (tarifaCombo.getSelectedItem() == "0%") {
            TarifaIva = 0;
        } else {
            TarifaIva = 0.12;
        }
        for (int i = 0; i < JListadoServiciosNotadeVenta.getSelectedIndices().length; i++) {
            TbServicios obtenerServiciosByPosicion = listadoS.obtenerServiciosByPosicion(JListadoServiciosNotadeVenta.getSelectedIndices()[i]);
            subtotalServicios += obtenerServiciosByPosicion.getCosto_servicio();
            System.out.println("subtotal de todos los servicios: " + subtotalServicios);
        }

        this.adicionalIva = subtotalServicios * TarifaIva;
        totalpaga = subtotalServicios + adicionalIva;

        subtotal.setText(Double.toString(subtotalServicios));
        total.setText(Double.toString(totalpaga));
        // iva.setText("12%");
        rucField.setText(this.numeroNota);

        String queryDB = "Insert into tb_facturaCabecera (fk_id_cliente,fk_id_tipoPago,ruc,fecha_emision,sri_Auth,iva,subtotal,total)"
                + "values(?,?,?,?,?,?,?,?) ";
        tbClientes clienteSeleccionado = listadoC.obtenerClienteByPosicion(comboBoxClientesNotaVenta.getSelectedIndex());
        tbTipoPago tipoPagoSeleccionado = listadoT.obtenerTipoPagoByPosition(tipoPago.getSelectedIndex());
        long idCabeceraNotadeVenta = 0;

        try (Connection conn = conexionDB.obtenerConexion(); PreparedStatement ps = conn.prepareStatement(queryDB, PreparedStatement.RETURN_GENERATED_KEYS)) {
            System.out.println("tipo de pago selecionado por id: " + tipoPagoSeleccionado.getIdTipoPago());
            ps.setLong(1, clienteSeleccionado.getIdCliente());
            ps.setInt(2, tipoPagoSeleccionado.getIdTipoPago());
            ps.setString(3, this.numeroNota);
            ps.setDate(4, fechaReservacionSql);
            ps.setString(5, this.numeroAut);
            ps.setDouble(6, TarifaIva);
            ps.setDouble(7, subtotalServicios);
            ps.setDouble(8, totalpaga);
            ps.execute();

            try (ResultSet obtenerAnteriorKey = ps.getGeneratedKeys()) {
                if (obtenerAnteriorKey.next()) {
                    idCabeceraNotadeVenta = obtenerAnteriorKey.getLong(1);
                    System.out.println("ID Autogenerado:  " + idCabeceraNotadeVenta);
                }
            }
            System.out.println("Insercion de cabecera de factura exitosa");

        } catch (Exception ex) {
            System.out.println("problemas con la insercion de la cabecera de la factura: " + ex);
        }

        //insercion de detalle de nota de venta
        String queryServicios = "Insert into tb_facturasDetalle (fk_id_facturaCabecera, fk_id_servicios) "
                + " values (?,?);";
        try (Connection conn = conexionDB.obtenerConexion(); PreparedStatement ps = conn.prepareStatement(queryServicios)) {

            for (int i = 0; i < JListadoServiciosNotadeVenta.getSelectedIndices().length; i++) {
                TbServicios obtenerServiciosByPosicion = listadoS.obtenerServiciosByPosicion(JListadoServiciosNotadeVenta.getSelectedIndices()[i]);
                ps.setLong(1, idCabeceraNotadeVenta);
                ps.setLong(2, obtenerServiciosByPosicion.getIdServicios());
                ps.execute();
            }

            Object[] options = {"OK"};
            int result = JOptionPane.showOptionDialog(null, "Nota de venta guardada exitosamente", "Proceso exitoso", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
            System.out.println("Insercion de detalle exitoso");
            if (result == JOptionPane.OK_OPTION) {
                tipoPago.setSelectedIndex(-1);
                JListadoServiciosNotadeVenta.clearSelection();
                comboBoxClientesNotaVenta.setSelectedIndex(-1);
                this.tarifaCombo.setSelectedIndex(-1);
                subtotal.setText("");
                subtotal.setText("");
                total.setText("");
                System.out.println("OK seleccionado");
            }

        } catch (Exception e) {
            System.err.println("Error registrando detalle: " + e);
        }

    }//GEN-LAST:event_guardarNotaVentaActionPerformed

    private void guardaclienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardaclienteActionPerformed

        String regexletras = "^[a-zA-Z\\s]{1,120}$";
        String regexCedula = "^[0-9]{10}$";
        String regexTelefono = "^[0-9]{10}$";
        String regexCorreo = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,50}$";

        Pattern patternText = Pattern.compile(regexletras);
        Pattern patternced = Pattern.compile(regexCedula);
        Pattern patterntelf = Pattern.compile(regexTelefono);
        Pattern patterncorreo = Pattern.compile(regexCorreo);

        Matcher matchernombre = patternText.matcher(nombreCompleto.getText());
        Matcher matcherced = patternced.matcher(identificacion.getText());
        Matcher matchertelf = patterntelf.matcher(telefono.getText());
        Matcher matchercorreo = patterncorreo.matcher(correo.getText());

        if (nombreCompleto.getText().isEmpty() && identificacion.getText().isEmpty() && correo.getText().isEmpty() && telefono.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe ingresar todos los datos", "Intentelo nuevamente", ERROR_MESSAGE);
            return;
        } else if (nombreCompleto.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe ingresar el nombre completo", "Intentelo nuevamente", ERROR_MESSAGE);
            return;
        } else if (identificacion.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe ingresar la identificación", "Intentelo nuevamente", ERROR_MESSAGE);
            return;
        } else if (correo.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe ingresar el correo", "Intentelo nuevamente", ERROR_MESSAGE);
            return;
        } else if (telefono.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe ingresar el teléfono", "Intentelo nuevamente", ERROR_MESSAGE);
            return;
        } else if (!matchernombre.matches()) {
            JOptionPane.showMessageDialog(null, "El nombre puede contener hasta 120 caracteres alfabéticos y espacios", "Intentelo nuevamente", ERROR_MESSAGE);
            return;
        } else if (!matcherced.matches()) {
            JOptionPane.showMessageDialog(null, "La cédula debe contener 10 caracteres númericos", "Intentelo nuevamente", ERROR_MESSAGE);
            return;
        } else if (!matchertelf.matches()) {
            JOptionPane.showMessageDialog(null, "El teléfono debe contener 10 caracteres númericos", "Intentelo nuevamente", ERROR_MESSAGE);
            return;
        } else if (!matchercorreo.matches()) {
            JOptionPane.showMessageDialog(null, "Por favor, ingrese un formato de correo válido", "Intentelo nuevamente", ERROR_MESSAGE);
            return;
        }

        String queryDB = "Insert into tb_cliente (primer_nombre,identificacion,correo,telefono)"
                + "values(?,?,?,?) ";

        try (Connection conn = conexionDB.obtenerConexion(); PreparedStatement ps = conn.prepareStatement(queryDB)) {

            ps.setString(1, nombreCompleto.getText());
            ps.setString(2, identificacion.getText());
            ps.setString(3, correo.getText());
            ps.setString(4, telefono.getText());

            ps.execute();
            JOptionPane.showMessageDialog(null, "Cliente guardado exitosamente", "Proceso exitoso", JOptionPane.INFORMATION_MESSAGE);
            System.out.println("Insercion de clientes exitosa");

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Lo sentimos, tuvimos problemas con el proceso", "Proceso Fallido", JOptionPane.ERROR_MESSAGE);
            System.out.println("problemas con la insercion del cliente: " + ex);
        }
    }//GEN-LAST:event_guardaclienteActionPerformed

    private void cancelarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarClienteActionPerformed
        this.panelinicial.setVisible(true);
        this.reservas.setVisible(false);
        this.notasDeVenta.setVisible(false);
        this.clientes.setVisible(false);
        this.sorteos.setVisible(false);
    }//GEN-LAST:event_cancelarClienteActionPerformed

    private void cancelarNotaVenta1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarNotaVenta1ActionPerformed
        this.panelinicial.setVisible(true);
        this.reservas.setVisible(false);
        this.notasDeVenta.setVisible(false);
        this.clientes.setVisible(false);
        this.sorteos.setVisible(false);
    }//GEN-LAST:event_cancelarNotaVenta1ActionPerformed

    private void generarGanadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarGanadorActionPerformed

        String queryDB = "SELECT idCliente, primer_nombre, identificacion, correo, telefono "
                + "from tb_cliente";

        try (Connection conn = conexionDB.obtenerConexion(); PreparedStatement ps = conn.prepareStatement(queryDB)) {
            ResultSet rs = ps.executeQuery();
            ArrayList<Long> clientesRandom = new ArrayList<>();
            ArrayList<String> clientesRandomNames = new ArrayList<>();

            while (rs.next()) {
                tbClientes clientes = new tbClientes(rs.getLong(1),
                        rs.getString(2), rs.getString(3), rs.getString(4),
                        rs.getString(5));
                listadoC.agregarClientes(clientes);
                clientesRandom.add(clientes.getIdCliente());
                clientesRandomNames.add(clientes.getPrimer_nombre());
            }
            int posisionSelected = (int) (Math.random() * (clientesRandom.size()));
            ganadorField.setText(clientesRandomNames.get(posisionSelected));
            this.valorSemilla = clientesRandom.get(posisionSelected);

            System.out.println("valor semilla elegido" + clientesRandom.get(posisionSelected));
        } catch (Exception e) {
            System.err.println("conexion fallida: " + e);
        }
    }//GEN-LAST:event_generarGanadorActionPerformed

    private void generarRandomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarRandomActionPerformed
        Date fechaActual = new Date();
        Date fechaSelecc = fechaex.getDate();
        int resultadocomparacion = fechaActual.compareTo(fechaSelecc);

        if (ganadorField.getText().isEmpty() && fechaSelecc == null) {
            JOptionPane.showMessageDialog(null, "Debe ingresar todos los datos", "Ingrese los datos correctamente", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (ganadorField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe ingresar el ganador", "Ingrese los datos correctamente", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (fechaSelecc == null) {
            JOptionPane.showMessageDialog(null, "Debe ingresar la fecha expiración", "Ingrese los datos correctamente", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (resultadocomparacion > 0) {
            JOptionPane.showMessageDialog(null, "La fecha expiración no debe ser menor o igual que la fecha actual", "Ingrese los datos correctamente", JOptionPane.ERROR_MESSAGE);
            return;
        }
        java.util.Date fechaReservacionUtil = fechaex.getDate();
        java.sql.Date fechaReservacionSql = new java.sql.Date(fechaReservacionUtil.getDate());
        System.out.println("fecha seleccionada: " + fechaex.getDate());

        String queryEnvio = "INSERT INTO tb_sorteos (fk_id_cliente,fecha_expiracion) values(?,?)";
        try (Connection conne = conexionDB.obtenerConexion(); PreparedStatement ps = conne.prepareStatement(queryEnvio)) {
            ps.setLong(1, this.valorSemilla);
            ps.setDate(2, fechaReservacionSql);

            ps.execute();

            Object[] options = {"OK"};
            int result = JOptionPane.showOptionDialog(null, "Ganador de sorteo guardado exitosamente", "Proceso exitoso", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
            System.out.println("Insercion de ganador de sorteo exitoso");
            if (result == JOptionPane.OK_OPTION) {
                ganadorField.setText("");
                fechaex.setDate(null);
            }
            System.out.println("Insercion de sorteo exitosa");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Lo sentimos, tuvimos problemas con el proceso", "Proceso Fallido", JOptionPane.ERROR_MESSAGE);
            System.out.println("problemas con la insercion del sorteo: " + e);
        }
    }//GEN-LAST:event_generarRandomActionPerformed

    private void correoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_correoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_correoActionPerformed

    private void ganadorFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ganadorFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ganadorFieldActionPerformed

    private void guardaservActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardaservActionPerformed
        String userValidation = "^[a-zA-Z0-9 ]{1,100}$";
        String preciovalid = "^(?=.{1,8}$)(?:\\d{1,6}(?:\\.\\d{1,2})?|\\.\\d{1,2})?$";

        Pattern patternserv = Pattern.compile(userValidation);
        Pattern patterncprice = Pattern.compile(preciovalid);
        
        Matcher matcherserv = patternserv.matcher(servicioNamefield.getText());
        Matcher matcherprice = patterncprice.matcher(costoServ.getText());

        if (servicioNamefield.getText().isEmpty() && costoServ.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe ingresar todos los datos", "Ingrese los datos correctamente", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (servicioNamefield.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe ingresar el nombre del servicio", "Ingrese los datos correctamente", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (costoServ.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe ingresar el precio del servicio", "Ingrese los datos correctamente", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (!matcherserv.matches()) {
            JOptionPane.showMessageDialog(null, "El nombre de servicio puede contener hasta 100 caracteres alfanuméricos", "Intentelo nuevamente", ERROR_MESSAGE);
            return;
        } else if (!matcherprice.matches()) {
            JOptionPane.showMessageDialog(null, "Por favor, ingrese un formato de precio válido", "Intentelo nuevamente", ERROR_MESSAGE);
            return;
        }

        String str = costoServ.getText();
        float costoporServ = Float.parseFloat(str);
        String queryEnvio = "INSERT INTO tb_servicios (nombre_servicio,costo_servicio) values(?,?)";
        try (Connection conne = conexionDB.obtenerConexion(); PreparedStatement ps = conne.prepareStatement(queryEnvio)) {
            ps.setString(1, servicioNamefield.getText());
            ps.setFloat(2, costoporServ);

            ps.execute();

            Object[] options = {"OK"};
            int result = JOptionPane.showOptionDialog(null, "Servicio guardado exitosamente", "Proceso exitoso", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
            System.out.println("Insercion de servicio de sorteo exitoso");
            if (result == JOptionPane.OK_OPTION) {
                servicioNamefield.setText("");
                costoServ.setText("");
            }
            System.out.println("Insercion de sorteo servicio");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Lo sentimos, tuvimos problemas con el proceso", "Proceso Fallido", JOptionPane.ERROR_MESSAGE);
            System.out.println("problemas con la insercion del servicio: " + e);
        }


    }//GEN-LAST:event_guardaservActionPerformed

    private void cancelarservActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarservActionPerformed
        this.panelinicial.setVisible(true);
        this.reservas.setVisible(false);
        this.notasDeVenta.setVisible(false);
        this.clientes.setVisible(false);
        this.sorteos.setVisible(false);
        this.servicios.setVisible(false);
    }//GEN-LAST:event_cancelarservActionPerformed

    private void menuServiciosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuServiciosActionPerformed
        this.panelinicial.setVisible(false);
        this.reservas.setVisible(false);
        this.notasDeVenta.setVisible(false);
        this.clientes.setVisible(false);
        this.sorteos.setVisible(false);
        this.servicios.setVisible(true);
    }//GEN-LAST:event_menuServiciosActionPerformed

    private void tarifaComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tarifaComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tarifaComboActionPerformed

    private void cargarComboClientes() {
        String queryDB = "SELECT idCliente, primer_nombre, identificacion, correo, telefono "
                + "from tb_cliente";
        try (Connection conn = conexionDB.obtenerConexion(); PreparedStatement ps = conn.prepareStatement(queryDB)) {
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                tbClientes clientes = new tbClientes(rs.getLong(1),
                        rs.getString(2), rs.getString(3), rs.getString(4),
                        rs.getString(5));
                listadoC.agregarClientes(clientes);
                comboBoxClientesReserv.addItem(clientes.getPrimer_nombre());
                comboBoxClientesNotaVenta.addItem(clientes.getPrimer_nombre());
            }

        } catch (Exception e) {
            System.err.println("conexion fallida: " + e);
        }
    }

    private void cargarComboServicios() {
        String queryDB = "SELECT idServicios, nombre_servicio, costo_servicio "
                + "from tb_servicios";
        try (Connection conn = conexionDB.obtenerConexion(); PreparedStatement ps = conn.prepareStatement(queryDB)) {
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                TbServicios servicios = new TbServicios(rs.getLong(1),
                        rs.getString(2), rs.getDouble(3));
                listadoS.agregarServicios(servicios);

            }

        } catch (Exception e) {
            System.err.println("conexion fallida: " + e);
        }
        JListadoServicios.setListData(listadoS.getListaNombresServicios());
        JListadoServiciosNotadeVenta.setListData(listadoS.getListaNombresServicios());
    }

    private void cargarComboTipoPago() {
        String queryDB = "SELECT idTipoPago, tipo_pago "
                + "from tb_tipoPago";
        try (Connection conn = conexionDB.obtenerConexion(); PreparedStatement ps = conn.prepareStatement(queryDB)) {
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                tbTipoPago tipoPagos = new tbTipoPago(rs.getInt(1), rs.getString(2));
                listadoT.agregarTipoPago(tipoPagos);
                tipoPago.addItem(tipoPagos.getTipo_pago());
            }

        } catch (Exception e) {
            System.err.println("conexion fallida: " + e);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(menuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(menuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(menuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(menuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new menuPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> JListadoServicios;
    private javax.swing.JList<String> JListadoServiciosNotadeVenta;
    private javax.swing.JTextField auth;
    private javax.swing.JLabel background;
    private javax.swing.JLabel backgroundServ;
    private javax.swing.JButton cancelarCliente;
    private javax.swing.JButton cancelarNotaVenta;
    private javax.swing.JButton cancelarNotaVenta1;
    private javax.swing.JButton cancelarReserva;
    private javax.swing.JButton cancelarserv;
    private javax.swing.JPanel clientes;
    private javax.swing.JMenuItem clientesItem;
    private javax.swing.JMenu clientesMenu;
    private javax.swing.JComboBox<String> comboBoxClientesNotaVenta;
    private javax.swing.JComboBox<String> comboBoxClientesReserv;
    private javax.swing.JTextField correo;
    private javax.swing.JTextField costoServ;
    private javax.swing.JTextField fechaEmision;
    private com.toedter.calendar.JDateChooser fechaReserva;
    private com.toedter.calendar.JDateChooser fechaex;
    private com.raven.swing.TimePicker finalHourPopUp;
    private javax.swing.JLabel fondoclientes;
    private javax.swing.JLabel fondosorteos;
    private javax.swing.JTextField ganadorField;
    private javax.swing.JButton generarGanador;
    private javax.swing.JButton generarRandom;
    private javax.swing.JButton guardacliente;
    private javax.swing.JButton guardarNotaVenta;
    private javax.swing.JButton guardarReserva;
    private javax.swing.JButton guardaserv;
    private javax.swing.JTextField horaFin;
    private javax.swing.JTextField horaIni;
    private javax.swing.JTextField identificacion;
    private com.raven.swing.TimePicker iniHourPopUp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenu menuPrinci;
    private javax.swing.JMenuItem menuServicios;
    private javax.swing.JTextField nombreCompleto;
    private javax.swing.JMenuItem notaDeVentaItem;
    private javax.swing.JMenu notaDeVentaMenu;
    private javax.swing.JPanel notasDeVenta;
    private javax.swing.JPanel panelinicial;
    private javax.swing.JPanel reservas;
    private javax.swing.JMenuItem reservasItem;
    private javax.swing.JMenu reservasMenu;
    private javax.swing.JTextField rucField;
    private javax.swing.JButton seleccionarHoraFinal;
    private javax.swing.JButton seleccionarHoraInicial1;
    private javax.swing.JTextField servicioNamefield;
    private javax.swing.JPanel servicios;
    private javax.swing.JPanel sorteos;
    private javax.swing.JMenuItem sorteosItem;
    private javax.swing.JMenu sorteosMenu;
    private javax.swing.JTextField subtotal;
    private javax.swing.JComboBox<String> tarifaCombo;
    private javax.swing.JTextField telefono;
    private javax.swing.JComboBox<String> tipoPago;
    private javax.swing.JTextField total;
    // End of variables declaration//GEN-END:variables

}
